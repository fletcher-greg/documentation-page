{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","Fragment","id","className","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23be3efb.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <nav id=\"navbar\">\n        <header className=\"font-weight-bold\">Progressive Web Apps</header>\n        <a href=\"#Get_Started\" className=\"nav-link\">\n          Get Started\n        </a>\n        <a\n          href=\"#Create_and_Register_a_Service_Worker_File\"\n          className=\"nav-link\"\n        >\n          Create and Register a Service Worker File\n        </a>\n        <a href=\"#Importing_Workbox\" className=\"nav-link\">\n          Importing Workbox\n        </a>\n        <a href=\"#Using_Workbox\" className=\"nav-link\">\n          Using Workbox\n        </a>\n        <a href=\"#What_Else_Can_Workbox_Do?\" className=\"nav-link\">\n          What Else Can Workbox Do?\n        </a>\n      </nav>\n      <main className=\"App\" id=\"main-doc\">\n        <header className=\"disclaimer font-weight-bold\">Disclaimer</header>\n        <p className=\"font-italic\">\n          This content is taken from{\" \"}\n          <span className=\"btn-link\">\n            <a href=\"https://developers.google.com/web/tools/workbox/\">\n              Google Developers WorkBox Documentation\n            </a>\n          </span>{\" \"}\n          and is for prototyping and education purposes only.\n        </p>\n        <section className=\"main-section\" id=\"Get_Started\">\n          <header className=\"font-weight-bold\">Get Started</header>\n          <p>\n            This guide will show you how to get up and running with Workbox to\n            route common requests for a web page and demonstrate how to cache\n            using a common strategy.\n          </p>\n          <p>\n            Since most websites contain CSS, JavaScript and images, let’s look\n            at how we can cache and serve these files using a service worker and\n            Workbox.\n          </p>\n        </section>\n        <section\n          className=\"main-section\"\n          id=\"Create_and_Register_a_Service_Worker_File\"\n        >\n          <header className=\"font-weight-bold\">\n            Create and Register a Service Worker File\n          </header>\n          <p>\n            Before we can use Workbox, we need to create a service worker file\n            and register it to our website.\n          </p>\n          <p>\n            Start by creating a file called service-worker.js at the root of\n            your site and add a console message to the file (This is so we can\n            see it load).\n          </p>\n          <pre>\n            <code>console.log('Hello from service-worker.js');</code>\n          </pre>\n          <p>In your web page register your new service worker file like so:</p>\n\n          <pre />\n          <code>if ('serviceWorker' in navigator)</code>\n          <p>\n            This tells the browser this is the service worker to use for site.\n            If you refresh your page you'll see the log from your service worker\n            file.\n          </p>\n          <p>\n            Looking in the “Application” tab in Chrome DevTools you should see\n            your service worker registered.\n          </p>\n          <p>\n            Now that we have a service worker registered, let’s look at how we\n            can use Workbox.\n          </p>\n        </section>\n        <section className=\"main-section\" id=\"Importing_Workbox\">\n          <header className=\"font-weight-bold\">Importing Workbox</header>\n          <p>\n            {\" \"}\n            To start using Workbox you just need to import the{\" \"}\n            <code>workbox-sw.js</code>\n            file in your service worker.\n          </p>\n          <p>\n            Change your service worker so that it has the following\n            <code>importScripts()</code> call.\n          </p>\n          <pre>\n            <code>\n              importScripts('https://storage.googleapis.com/workbox-cdn/releases/4.3.1/workbox-sw.js')\n            </code>\n          </pre>\n          <p>Now we can start using Workbox.</p>\n        </section>\n        <section className=\"main-section\" id=\"Using_Workbox\">\n          <header className=\"font-weight-bold\">Using Workbox</header>\n          <p>\n            One of Workbox’s primary features is it’s routing and caching\n            strategy modules. It allows you to listen for requests from your web\n            page and determine if and how that request should be cached and\n            responded to.\n          </p>\n          <p>\n            Let’s add a cache fallback to our JavaScript files. The easiest way\n            to do this is to register a route with Workbox that will match any\n            .js files that are requested, which we can do with a regular\n            expression:\n          </p>\n          <pre>\n            <code>workbox.routing.registerRoute( /\\.js$/, … );</code>\n          </pre>\n          <p>\n            This tells Workbox that when a request is made, it should see if the\n            regular expression matches part of the URL, and if it does, do\n            something with that request. For this guide, that “do something” is\n            going to be passing the request through one of Workbox’s caching\n            strategies.\n          </p>\n          <p>\n            If we want our JavaScript files to come from the network whenever\n            possible, but fallback to the cached version if the network fails,\n            we can use the “network first” strategy to achieve this.\n          </p>\n          <p>\n            Workbox has routed the request for any .js files and used the\n            network first strategy to determine how to respond to the request.\n            You can look in the caches of DevTools to check that the request has\n            actually been cached.\n          </p>\n          <p>\n            Workbox provides a few caching strategies that you can use. For\n            example, your CSS could be served from the cache first and updated\n            in the background or your images could be cached and used until it’s\n            a week old, after which it’ll need updating.\n          </p>\n        </section>\n        <section className=\"main-section\" id=\"What_Else_Can_Workbox_Do?\">\n          <header className=\"font-weight-bold\">\n            What Else Can Workbox Do?\n          </header>\n          <p>\n            Routing and caching strategies are performed by the routing and\n            strategies modules, but there are plenty of other modules, each\n            offering specific behaviors that you can use in your service worker.\n          </p>\n          <p>\n            You'll find a number of guides that cover other features of Workbox\n            as well as more information on configuring Workbox. Find a full list\n            on the left, but the next natural step is to enable precaching,\n            which is the process of adding files to the cache when your service\n            worker loads.\n          </p>\n\n          <div className=\"container custom-btn-group\">\n            <header className=\"\">\n              Want to learn more? Check out these links!\n            </header>\n            <div className=\"row\">\n              <a\n                href=\"https://developers.google.com/web/tools/workbox/\"\n                className=\"col-12 btn btn-link   text-left \"\n              >\n                Found out more about WorkBox\n              </a>\n              <a\n                href=\"https://developers.google.com/web/progressive-web-apps/desktop\"\n                className=\"col-12 btn btn-link   text-left \"\n              >\n                Learn about Desktop PWA's\n              </a>\n\n              <a\n                href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\"\n                className=\"col-12 btn btn-link   text-left \"\n              >\n                Service Workers 101\n              </a>\n              <a\n                href=\"https://developers.google.com/web/ilt/pwa/working-with-the-fetch-api-slides\"\n                className=\"col-12 btn btn-link   text-left \"\n              >\n                Working with the Fetch API\n              </a>\n              <a\n                href=\"https://developers.google.com/web/tools/lighthouse/\"\n                className=\"col-12 btn btn-link   text-left \"\n              >\n                Learn how to use Lighthouse\n              </a>\n            </div>\n          </div>\n        </section>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}